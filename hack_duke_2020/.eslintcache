[{"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\index.js":"1","C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\reportWebVitals.js":"2","C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\App.js":"3","C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\components\\index.js":"4","C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\components\\Customers\\Customers.js":"5","C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\components\\Businesses\\Businesses.js":"6","C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\Firebase\\firebase.js":"7","C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\components\\Customers\\GoogleMap.js":"8"},{"size":611,"mtime":1607198250059,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1607182702637,"results":"11","hashOfConfig":"10"},{"size":526,"mtime":1607214539952,"results":"12","hashOfConfig":"10"},{"size":129,"mtime":1607198200744,"results":"13","hashOfConfig":"10"},{"size":465,"mtime":1607211583708,"results":"14","hashOfConfig":"10"},{"size":327,"mtime":1607211583706,"results":"15","hashOfConfig":"10"},{"size":526,"mtime":1607211583705,"results":"16","hashOfConfig":"10"},{"size":3039,"mtime":1607214421310,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1eai86b",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\index.js",[],["36","37"],"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\reportWebVitals.js",[],"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\App.js",[],"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\components\\index.js",[],"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\components\\Customers\\Customers.js",[],"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\components\\Businesses\\Businesses.js",[],"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\Firebase\\firebase.js",[],"C:\\Users\\richa\\Documents\\Projects\\HackDuke2020\\hack_duke_2020\\src\\components\\Customers\\GoogleMap.js",["38"],"import React, { Component } from \"react\";\r\nimport {\r\n  Map,\r\n  InfoWindow,\r\n  Marker,\r\n  GoogleApiWrapper,\r\n  Polygon,\r\n} from \"google-maps-react\";\r\nimport { geocodeByPlaceId } from \"react-places-autocomplete\";\r\nimport \"./GoogleMap.css\";\r\n\r\nexport class GoogleMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      latitude: 35.994,\r\n      longitude: -78.8986,\r\n      place_ids: [\r\n        \"ChIJ74cKbp_nrIkR-d-zE9lgt88\",\r\n        \"ChIJoY7M-G3krIkRHcQ5pHpWHOs\",\r\n        \"ChIJ53W3QQfkrIkRb5gP_Ms5YeQ\",\r\n      ],\r\n      place_coords: [],\r\n    };\r\n  }\r\n\r\n  onMarkerClick = () => {\r\n    console.log(\"Marker Clicked\");\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getBusinessCoords();\r\n  };\r\n\r\n  getBusinessCoords = async () => {\r\n    let coords = [];\r\n\r\n    for (let i = 0; i < this.state.place_ids.length; i++) {\r\n      let place_id = this.state.place_ids[i];\r\n      let results = await geocodeByPlaceId(place_id);\r\n\r\n      results.map((res) => {\r\n        coords.push([res.geometry.location.lat(), res.geometry.location.lng()]);\r\n      });\r\n    }\r\n    this.setState({ place_coords: coords });\r\n  };\r\n\r\n  render() {\r\n    let init_coords = { lat: this.state.latitude, lng: this.state.longitude };\r\n\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        initialCenter={init_coords}\r\n        zoom={15}\r\n        onClick={this.onMapClicked}\r\n        className=\"Map\"\r\n      >\r\n        {/* <Marker onClick={this.onMarkerClick}\r\n                  name={'Current location'} /> */}\r\n\r\n        {/* Render location markers */}\r\n        {this.state.place_coords.map((coord, key) => {\r\n          return (\r\n            <Marker\r\n              key={key}\r\n              name={\"Place\"}\r\n              position={{ lat: coord[0], lng: coord[1] }}\r\n            />\r\n          );\r\n        })}\r\n\r\n        {/* Render polygons around each location marker */}\r\n        {this.state.place_coords.map((coord, key) => {\r\n          return (\r\n            <Polygon\r\n              key={key}\r\n              paths={[\r\n                {\r\n                  lat: coord[0] - 0.01,\r\n                  lng: coord[1] - 0.01,\r\n                },\r\n                {\r\n                  lat: coord[0] + 0.01,\r\n                  lng: coord[1] - 0.01,\r\n                },\r\n                {\r\n                  lat: coord[0] + 0.01,\r\n                  lng: coord[1] + 0.01,\r\n                },\r\n                {\r\n                  lat: coord[0] - 0.01,\r\n                  lng: coord[1] + 0.01,\r\n                },\r\n              ]}\r\n              strokeColor=\"#00FF00\"\r\n              strokeOpacity={0.8}\r\n              strokeWeight={2}\r\n              fillColor=\"#00FF00\"\r\n              fillOpacity={0.35}\r\n            />\r\n          );\r\n        })}\r\n\r\n        <InfoWindow onClose={this.onInfoWindowClose}>\r\n          <div>\r\n            <h1>{\"Info\"}</h1>\r\n          </div>\r\n        </InfoWindow>\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyB8KvFSaeRKoX-MOPVWzg1pbjYa0TSP0rE\",\r\n})(GoogleMap);\r\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":43,"column":25,"nodeType":"45","messageId":"46","endLine":43,"endColumn":27},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]